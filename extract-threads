#!/usr/bin/python
# -*- coding: utf-8 -*-

from sys import argv
import praw
from math import log,log10
import json
import os.path


r = praw.Reddit('Programa Podemos Arag√≥n 1.0')
keys_file='rd.keys'
with open(keys_file) as f:
    username = f.readline().strip("\n")
    password = f.readline().strip("\n")
    
r.login(username = username, password = password)

sub=r.get_subreddit('plazaaragon').get_new(limit=1000)

T=3.5
proposals=[]
threads=[]

if len(argv) < 2:
	print "Usage: " + argv[0] + " <link_flair_tag>"
	exit(1)

#flair = argv[1]
filename=argv[1]
flairs=[]
for arg in argv[1:]:
	flairs=flairs+[arg.lower()]
print flairs

bufferfile='buffer.json'
if os.path.isfile(bufferfile):
	with open(bufferfile) as infile:
		bdata = json.load(infile)
else:
	bdata={}

for s in sub:
	threads=threads+[s.id]
	if str(s.link_flair_css_class).lower() in flairs:
#	if s.link_flair_text== flair:
		print s
		p={}
		p['url']= s.url
		title=s.title
		if title.isupper():
			title=title.lower()
		p['title']=title
		p['author']=str(s.author)

		score=s.score
		
		p['comments']=len(s.comments)
		#Consensus
#		if hasattr(s, 'upvote_ratio'):
#			ratio = s.upvote_ratio
#		else:
		post=r.get_submission(submission_id=s.id)
		ratio = post.upvote_ratio
		score = post.score
		p['ratio']=ratio
		if ratio>0 and ratio != 0.5:
			ups=int(round(s.score/(2.0 - 1.0/ratio)))
		else:
			ups=0
		downs=max(0,-(score-ups))
		if s.id in bdata:
			ini = max(0,len(bdata[s.id]['ups'])-5)
			bdata[s.id]['ups']=bdata[s.id]['ups'][ini:]+[ups]
			bdata[s.id]['downs']=bdata[s.id]['downs'][ini:]+[downs]
		else:
			bdata[s.id]={}
			bdata[s.id]['ups']=[ups]
			bdata[s.id]['downs']=[downs]
		ups=min(bdata[s.id]['ups'])
		downs=min(bdata[s.id]['downs'])
		p['downs']=downs
		p['ups']=ups
		p['score']=score
		print 'ups', bdata[s.id]['ups']
		print 'downs', bdata[s.id]['downs']
		print ups, downs, score
		consensus=log(ups+downs+1,10) * (ratio*2-1) 
		p['consensus']=consensus
		

		# Decelerated hotness
		timeweight = 45000.0 * 2 * 7 * T #Reddit -> T=0.5 - ~12h
		score=s.score
		seconds = s.created
		sc = log10(max(abs(score)+1, 1))
		if score > 0:
			sign = 1
		elif score < 0:
			sign = -1
		else:
			sign = 0
		hotness = round(sign * sc + seconds / timeweight, 7) 
		p['hotness']=hotness
		p['timestamp']=s.created
		proposals=proposals+[p]
		p['accepted']=score>22
		
		#Answers
		p['response']=False
		for comment in s.comments:
			if str(comment.author)=='CCAragon':
				p['response']=True


proposals = sorted(proposals, key=lambda obj: obj['score'], reverse=True)

if len(proposals):
	with open(filename+'.json', 'w') as outfile:
		json.dump(proposals, outfile)


if os.path.isfile("threads.json"):
	with open("threads.json") as infile:
		threads1 = json.load(infile)
	threads=list(set(threads+threads1))
with open('threads.json','w') as outfile:
	json.dump(threads,outfile)
with open(bufferfile,'w') as outfile:
        json.dump(bdata,outfile)

